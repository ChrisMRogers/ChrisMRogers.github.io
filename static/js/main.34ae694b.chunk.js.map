{"version":3,"sources":["Components/GlobalStyles.js","Components/Themes.js","Components/useDarkMode.js","Components/Toggler.js","Components/Navbar.js","App.js","index.js"],"names":["GlobalStyles","createGlobalStyle","theme","body","text","lightTheme","background","darkTheme","useDarkMode","useState","setTheme","mountedComponent","setMountedComponent","setMode","mode","window","localStorage","setItem","useEffect","localTheme","getItem","Button","styled","button","Toggle","toggleTheme","onClick","icon","faCloudMoon","faSun","Navigation","ul","ListItem","li","Link","a","props","color","Navbar","themeToggler","themeMode","href","Toggler","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOACaA,EAAeC,YAAH,sLAEP,qBAAGC,MAAkBC,QAC1B,qBAAGD,MAAkBE,QCJrBC,EAAa,CACtBF,KAAM,OACNC,KAAM,UACNE,WAAY,WAEHC,EAAY,CACrBJ,KAAM,UACNC,KAAM,UACNE,WAAY,QCPHE,EAAc,WACvB,MAA0BC,mBAAS,SAAnC,mBAAOP,EAAP,KAAcQ,EAAd,KACA,EAAgDD,oBAAS,GAAzD,mBAAOE,EAAP,KAAyBC,EAAzB,KAEMC,EAAU,SAAAC,GACZC,OAAOC,aAAaC,QAAQ,QAASH,GACrCJ,EAASI,IAYb,OALAI,qBAAU,WACN,IAAMC,EAAaJ,OAAOC,aAAaI,QAAQ,SAC/CD,GAAcT,EAASS,GACvBP,GAAoB,KACrB,IACI,CAACV,EATa,WACGW,EAAV,UAAVX,EAA4B,OAAkB,UAQrBS,I,uBCb3BU,EAASC,IAAOC,OAAV,qNACI,qBAAGrB,MAAkBC,QAC1B,qBAAGD,MAAkBE,QAmBjBoB,EATA,SAAC,GAA4B,IAA1BtB,EAAyB,EAAzBA,MAAOuB,EAAkB,EAAlBA,YACrB,MACc,UAAVvB,EAAoB,cAACmB,EAAD,CAAQK,QAASD,EAAjB,SAA8B,cAAC,IAAD,CAAiBE,KAAMC,QAA2B,cAACP,EAAD,CAAQK,QAASD,EAAjB,SAA8B,cAAC,IAAD,CAAiBE,KAAME,SCZ3JC,EAAaR,IAAOS,GAAV,wIAOVC,EAAWV,IAAOW,GAAV,gCAGRC,EAAOZ,IAAOa,EAAV,wKAKA,SAAAC,GAAK,OAAIA,EAAMC,QACtBL,GAiCYM,MA5Bf,WACC,MAAgD9B,IAAhD,mBAAON,EAAP,KAAcqC,EAAd,KAA4B5B,EAA5B,KACM6B,EAAsB,UAAVtC,EAAoBG,EAAaE,EAEnD,OAAKI,EAEJ,cAAC,IAAD,CAAeT,MAAOsC,EAAtB,SACC,qCACC,cAACxC,EAAD,IACA,8BACC,eAAC8B,EAAD,WACC,cAACE,EAAD,UAAU,cAACE,EAAD,CAAMO,KAAK,IAAIJ,MAAK,OAAEG,QAAF,IAAEA,OAAF,EAAEA,EAAWpC,KAAjC,sBACV,cAAC4B,EAAD,UAAU,cAACE,EAAD,CAAMO,KAAK,IAAIJ,MAAK,OAAEG,QAAF,IAAEA,OAAF,EAAEA,EAAWpC,KAAjC,uBACV,cAAC4B,EAAD,UAAU,cAACE,EAAD,CAAMO,KAAK,IAAIJ,MAAK,OAAEG,QAAF,IAAEA,OAAF,EAAEA,EAAWpC,KAAjC,2BACV,cAAC4B,EAAD,UAAU,cAACE,EAAD,CAAMO,KAAK,IAAIJ,MAAK,OAAEG,QAAF,IAAEA,OAAF,EAAEA,EAAWpC,KAAjC,0BACV,6BAAI,cAACsC,EAAD,CAASxC,MAAOA,EAAOuB,YAAac,gBAXf,yBCNhBI,MAnBf,WACE,MAAkCnC,IAAlC,mBAAON,EAAP,KAAcS,EAAd,KACM6B,EAAsB,UAAVtC,EAAoBG,EAAaE,EAEnD,OAAKI,EAEH,cAAC,IAAD,CAAeT,MAAOsC,EAAtB,SACE,qCACE,cAACxC,EAAD,IACA,qBAAK4C,UAAU,MAAf,SACE,cAAC,EAAD,WANsB,yBCPhCC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.34ae694b.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\"\r\nexport const GlobalStyles = createGlobalStyle`\r\n  body {\r\n    background: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n    font-family: Tahoma, Helvetica, Arial, Roboto, sans-serif;\r\n    transition: all 1.0s linear;\r\n  }\r\n  `\r\n","export const lightTheme = {\r\n    body: '#FFF',\r\n    text: '#363537',\r\n    background: '#363537',\r\n}\r\nexport const darkTheme = {\r\n    body: '#212121',\r\n    text: '#FAFAFA',\r\n    background: '#999',\r\n\r\n}","import { useEffect, useState } from 'react';\r\nexport const useDarkMode = () => {\r\n    const [theme, setTheme] = useState('light');\r\n    const [mountedComponent, setMountedComponent] = useState(false)\r\n\r\n    const setMode = mode => {\r\n        window.localStorage.setItem('theme', mode)\r\n        setTheme(mode)\r\n    };\r\n\r\n    const themeToggler = () => {\r\n        theme === 'light' ? setMode('dark') : setMode('light')\r\n    };\r\n\r\n    useEffect(() => {\r\n        const localTheme = window.localStorage.getItem('theme');\r\n        localTheme && setTheme(localTheme)\r\n        setMountedComponent(true)\r\n    }, []);\r\n    return [theme, themeToggler, mountedComponent]\r\n};\r\n","import React from 'react'\r\nimport { func, string } from 'prop-types';\r\nimport styled from \"styled-components\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCloudMoon, faSun } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst Button = styled.button`\r\n  background: ${({ theme }) => theme.body};\r\n  color: ${({ theme }) => theme.text};\r\n  outline: none;\r\n  font-size:1.5rem;\r\n  cursor: pointer;\r\n  display: block;\r\n  border: none;\r\n  transition: all 1.0s linear;\r\n  padding: .5em;\r\n  }\r\n`;\r\nconst Toggle = ({ theme, toggleTheme }) => {\r\n    return (\r\n        theme === 'light' ? <Button onClick={toggleTheme}><FontAwesomeIcon icon={faCloudMoon} /></Button> : <Button onClick={toggleTheme}><FontAwesomeIcon icon={faSun} /></Button>\r\n    );\r\n};\r\nToggle.propTypes = {\r\n    theme: string.isRequired,\r\n    toggleTheme: func.isRequired,\r\n}\r\nexport default Toggle;\r\n","import React from 'react'\r\nimport styled from \"styled-components\"\r\nimport { ThemeProvider } from 'styled-components'\r\nimport { GlobalStyles } from './GlobalStyles'\r\nimport { darkTheme, lightTheme } from './Themes'\r\nimport Toggler from './Toggler'\r\nimport { useDarkMode } from './useDarkMode'\r\n\r\nconst Navigation = styled.ul`\r\n\tdisplay:flex;\r\n\tflex-flow: row wrap;\r\n\tjustify-content: flex-end;\r\n\tlist-style: none;\r\n\tmargin: 0;\r\n\t`;\r\nconst ListItem = styled.li`\r\n\r\n\t`;\r\nconst Link = styled.a`\r\n\ttext-decoration: none;\r\n\tdisplay: block;\r\n\tpadding: 1em;\r\n\tfont-weight: bold;\r\n\tcolor: ${props => props.color};\r\n\t${ListItem}:hover &{\r\n\t\tcolor:#1565c0;\r\n\t}\r\n`;\r\n\r\nfunction Navbar() {\r\n\tconst [theme, themeToggler, mountedComponent] = useDarkMode()\r\n\tconst themeMode = theme === 'light' ? lightTheme : darkTheme\r\n\r\n\tif (!mountedComponent) return <div />\r\n\treturn (\r\n\t\t<ThemeProvider theme={themeMode}>\r\n\t\t\t<>\r\n\t\t\t\t<GlobalStyles />\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Navigation>\r\n\t\t\t\t\t\t<ListItem><Link href=\"#\" color={themeMode?.text}>.who()</Link></ListItem>\r\n\t\t\t\t\t\t<ListItem><Link href=\"#\" color={themeMode?.text}>.work()</Link></ListItem>\r\n\t\t\t\t\t\t<ListItem><Link href=\"#\" color={themeMode?.text}>.projects()</Link></ListItem>\r\n\t\t\t\t\t\t<ListItem><Link href=\"#\" color={themeMode?.text}>.contact()</Link></ListItem>\r\n\t\t\t\t\t\t<li><Toggler theme={theme} toggleTheme={themeToggler} /></li>\r\n\t\t\t\t\t</Navigation>\r\n\t\t\t\t</div>\r\n\t\t\t</>\r\n\t\t</ThemeProvider>\r\n\t);\r\n}\r\n\r\n// Navbar.propTypes = {\r\n//     theme: string.isRequired,\r\n//     toggleTheme: func.isRequired,\r\n// }\r\n\r\nexport default Navbar","import React from 'react'\r\nimport './Styles/App.css';\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { GlobalStyles } from \"./Components/GlobalStyles\";\r\nimport { lightTheme, darkTheme } from \"./Components/Themes\"\r\nimport { useDarkMode } from \"./Components/useDarkMode\"\r\nimport Navbar from './Components/Navbar'\r\n\r\nfunction App() {\r\n  const [theme, mountedComponent] = useDarkMode();\r\n  const themeMode = theme === 'light' ? lightTheme : darkTheme;\r\n\r\n  if (!mountedComponent) return <div />\r\n  return (\r\n    <ThemeProvider theme={themeMode}>\r\n      <>\r\n        <GlobalStyles />\r\n        <div className=\"App\">\r\n          <Navbar />\r\n\r\n        </div>\r\n      </>\r\n    </ThemeProvider>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Styles/index.css';\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}