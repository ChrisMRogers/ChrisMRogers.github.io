{"version":3,"sources":["Components/GlobalStyles.js","Components/Themes.js","Components/Homepage.js","Components/Toggler.js","App.js","Components/useDarkMode.js","index.js"],"names":["GlobalStyles","createGlobalStyle","theme","body","text","lightTheme","background","darkTheme","Homepage","className","Button","styled","button","Toggle","toggleTheme","onClick","icon","faCloudMoon","faSun","App","useState","setTheme","mountedComponent","setMountedComponent","setMode","mode","window","localStorage","setItem","useEffect","localTheme","getItem","useDarkMode","themeToggler","themeMode","Toggler","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQACaA,EAAeC,YAAH,sLAEP,qBAAGC,MAAkBC,QAC1B,qBAAGD,MAAkBE,QCJrBC,EAAa,CACtBF,KAAM,OACNC,KAAM,UACNE,WAAY,WAEHC,EAAY,CACrBJ,KAAM,UACNC,KAAM,UACNE,WAAY,Q,qBCKDE,I,EAAAA,EATf,WACI,OACI,qBAAKC,UAAU,WAAf,SAEI,iD,gBCHNC,EAASC,IAAOC,OAAV,8KACI,qBAAGV,MAAkBC,QAC1B,qBAAGD,MAAkBE,QAiBjBS,EATA,SAAC,GAA4B,IAA1BX,EAAyB,EAAzBA,MAAOY,EAAkB,EAAlBA,YACrB,MACc,UAAVZ,EAAoB,cAACQ,EAAD,CAAQK,QAASD,EAAjB,SAA8B,cAAC,IAAD,CAAiBE,KAAMC,QAA2B,cAACP,EAAD,CAAQK,QAASD,EAAjB,SAA8B,cAAC,IAAD,CAAiBE,KAAME,SCalJC,MApBf,WACE,MCVyB,WACvB,MAA0BC,mBAAS,SAAnC,mBAAOlB,EAAP,KAAcmB,EAAd,KACA,EAAgDD,oBAAS,GAAzD,mBAAOE,EAAP,KAAyBC,EAAzB,KAEMC,EAAU,SAAAC,GACZC,OAAOC,aAAaC,QAAQ,QAASH,GACrCJ,EAASI,IAYb,OALAI,qBAAU,WACN,IAAMC,EAAaJ,OAAOC,aAAaI,QAAQ,SAC/CD,GAAcT,EAASS,GACvBP,GAAoB,KACrB,IACI,CAACrB,EATa,WACGsB,EAAV,UAAVtB,EAA4B,OAAkB,UAQrBoB,GDRiBU,GAAhD,mBAAO9B,EAAP,KAAc+B,EAAd,KAA4BX,EAA5B,KACMY,EAAsB,UAAVhC,EAAoBG,EAAaE,EAEnD,OAAKe,EAEH,cAAC,IAAD,CAAepB,MAAOgC,EAAtB,SACE,qCACE,cAAClC,EAAD,IACA,sBAAKS,UAAU,MAAf,UAEE,cAAC0B,EAAD,CAASjC,MAAOA,EAAOY,YAAamB,IACpC,cAAC,EAAD,YARsB,yBEThCG,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.c0b55772.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\"\r\nexport const GlobalStyles = createGlobalStyle`\r\n  body {\r\n    background: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n    font-family: Tahoma, Helvetica, Arial, Roboto, sans-serif;\r\n    transition: all 1.0s linear;\r\n  }\r\n  `\r\n","export const lightTheme = {\r\n    body: '#FFF',\r\n    text: '#363537',\r\n    background: '#363537',\r\n}\r\nexport const darkTheme = {\r\n    body: '#212121',\r\n    text: '#FAFAFA',\r\n    background: '#999',\r\n}","import React from 'react'\r\nimport '../Styles/Homepage.css'\r\nimport Navbar from './Navbar'\r\n\r\nfunction Homepage() {\r\n    return (\r\n        <div className=\"Homepage\">\r\n            {/* <Navbar /> */}\r\n            <h1>Chris Rogers</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Homepage","import React from 'react'\r\nimport { func, string } from 'prop-types';\r\nimport styled from \"styled-components\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCloudMoon, faSun } from '@fortawesome/free-solid-svg-icons'\r\nconst Button = styled.button`\r\n  background: ${({ theme }) => theme.body};\r\n  color: ${({ theme }) => theme.text};\r\n  outline: none;\r\n  font-size:2rem;\r\n  cursor: pointer;\r\n  border: none;\r\n  transition: all 1.0s linear;\r\n  }\r\n`;\r\nconst Toggle = ({ theme, toggleTheme }) => {\r\n    return (\r\n        theme === 'light' ? <Button onClick={toggleTheme}><FontAwesomeIcon icon={faCloudMoon} /></Button> : <Button onClick={toggleTheme}><FontAwesomeIcon icon={faSun} /></Button>\r\n    );\r\n};\r\nToggle.propTypes = {\r\n    theme: string.isRequired,\r\n    toggleTheme: func.isRequired,\r\n}\r\nexport default Toggle;\r\n","import React from 'react'\r\nimport './Styles/App.css';\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { GlobalStyles } from \"./Components/GlobalStyles\";\r\nimport { lightTheme, darkTheme } from \"./Components/Themes\"\r\nimport { useDarkMode } from \"./Components/useDarkMode\"\r\nimport Homepage from './Components/Homepage'\r\nimport Toggler from './Components/Toggler'\r\nimport Navbar from './Components/Navbar'\r\n\r\nfunction App() {\r\n  const [theme, themeToggler, mountedComponent] = useDarkMode();\r\n  const themeMode = theme === 'light' ? lightTheme : darkTheme;\r\n\r\n  if (!mountedComponent) return <div />\r\n  return (\r\n    <ThemeProvider theme={themeMode}>\r\n      <>\r\n        <GlobalStyles />\r\n        <div className=\"App\">\r\n          {/* <Navbar theme={theme} toggelTheme={themeToggler} /> */}\r\n          <Toggler theme={theme} toggleTheme={themeToggler} />\r\n          <Homepage />\r\n        </div>\r\n      </>\r\n    </ThemeProvider>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { useEffect, useState } from 'react';\r\nexport const useDarkMode = () => {\r\n    const [theme, setTheme] = useState('light');\r\n    const [mountedComponent, setMountedComponent] = useState(false)\r\n\r\n    const setMode = mode => {\r\n        window.localStorage.setItem('theme', mode)\r\n        setTheme(mode)\r\n    };\r\n\r\n    const themeToggler = () => {\r\n        theme === 'light' ? setMode('dark') : setMode('light')\r\n    };\r\n\r\n    useEffect(() => {\r\n        const localTheme = window.localStorage.getItem('theme');\r\n        localTheme && setTheme(localTheme)\r\n        setMountedComponent(true)\r\n    }, []);\r\n    return [theme, themeToggler, mountedComponent]\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Styles/index.css';\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}